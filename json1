# Function to recursively compare JSON objects, including arrays and nested objects
function Compare-NestedJson {
    param (
        [Parameter(Mandatory=$true)]
        [PSCustomObject]$Json1,

        [Parameter(Mandatory=$true)]
        [PSCustomObject]$Json2,

        [string]$Path = ""
    )

    # Get all keys (properties) from both JSON objects
    $allKeys = ($Json1.PSObject.Properties.Name + $Json2.PSObject.Properties.Name) | Sort-Object -Unique

    foreach ($key in $allKeys) {
        $currentPath = if ($Path) { "$Path.$key" } else { $key }

        if (-not $Json1.PSObject.Properties[$key]) {
            Write-Host "Key '$currentPath' exists only in the second JSON."
        } elseif (-not $Json2.PSObject.Properties[$key]) {
            Write-Host "Key '$currentPath' exists only in the first JSON."
        } else {
            $value1 = $Json1.$key
            $value2 = $Json2.$key

            # If both values are nested JSON objects, recurse
            if ($value1 -is [PSCustomObject] -and $value2 -is [PSCustomObject]) {
                Compare-NestedJson -Json1 $value1 -Json2 $value2 -Path $currentPath
            }
            # If both values are arrays, compare them
            elseif ($value1 -is [Array] -and $value2 -is [Array]) {
                if ($value1.Count -ne $value2.Count) {
                    Write-Host "Array size mismatch at '$currentPath': First JSON has $($value1.Count) items, second JSON has $($value2.Count) items."
                } else {
                    Compare-Arrays -Array1 $value1 -Array2 $value2 -Path $currentPath
                }
            }
            # For simple scalar values, compare directly
            elseif ($value1 -ne $value2) {
                Write-Host "Difference at '$currentPath':"
                Write-Host "First JSON:  $($value1)"
                Write-Host "Second JSON: $($value2)"
            }
        }
    }
}

# Function to compare arrays element-by-element
function Compare-Arrays {
    param (
        [Array]$Array1,
        [Array]$Array2,
        [string]$Path
    )

    for ($i = 0; $i -lt $Array1.Count; $i++) {
        $element1 = $Array1[$i]
        $element2 = $Array2[$i]
        $currentPath = "$Path[$i]"

        # Recursively compare if array elements are objects
        if ($element1 -is [PSCustomObject] -and $element2 -is [PSCustomObject]) {
            Compare-NestedJson -Json1 $element1 -Json2 $element2 -Path $currentPath
        } elseif ($element1 -ne $element2) {
            Write-Host "Difference at '$currentPath':"
            Write-Host "First JSON:  $($element1)"
            Write-Host "Second JSON: $($element2)"
        }
    }
}

# Load the JSON files
$json1 = Get-Content "C:\path\to\first_file.json" -Raw | ConvertFrom-Json
$json2 = Get-Content "C:\path\to\second_file.json" -Raw | ConvertFrom-Json

# Compare the two JSON files
Compare-NestedJson -Json1 $json1 -Json2 $json2

     
