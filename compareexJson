# Paths to the JSON files
$sample1Path = "C:\path\to\sample1.json"
$sample2Path = "C:\path\to\sample2.json"

# Load the JSON data
$sample1 = Get-Content -Raw -Path $sample1Path | ConvertFrom-Json
$sample2 = Get-Content -Raw -Path $sample2Path | ConvertFrom-Json

# Extract the structure and data
$structure1 = $sample1[0]
$data1 = $sample1[1]

$structure2 = $sample2[0]
$data2 = $sample2[1]

# Ensure both structures are identical
if ($structure1 -ne $structure2) {
    Write-Output "The structures are different."
    return
}

# Sort the data based on scalar fields from the structure (ensure fields are present)
# We will sort by all fields from the structure, prioritizing those that contain scalar values (e.g., string, int).
$sortableFields = $structure1 | Where-Object { $data1[0].PSObject.Properties[$_] -and -not ($data1[0].$_ -is [System.Collections.IEnumerable]) }

# Sort data1 and data2 using the scalar fields
$data1 = $data1 | Sort-Object -Property $sortableFields
$data2 = $data2 | Sort-Object -Property $sortableFields

# Function to compare two JSON objects
function Compare-JsonObjects {
    param (
        [Parameter(Mandatory=$true)]
        [pscustomobject]$object1,
        
        [Parameter(Mandatory=$true)]
        [pscustomobject]$object2
    )

    $differences = @()

    # Get all property names from both objects
    $allProperties = ($object1.PSObject.Properties.Name + $object2.PSObject.Properties.Name) | Sort-Object -Unique

    # Compare each property
    foreach ($property in $allProperties) {
        if (-not $object1.PSObject.Properties[$property]) {
            $differences += "Property '$property' found in object 2 but missing in object 1."
        } elseif (-not $object2.PSObject.Properties[$property]) {
            $differences += "Property '$property' found in object 1 but missing in object 2."
        } elseif ($object1.$property -ne $object2.$property) {
            $differences += "Difference in property '$property': object1='$($object1.$property)' object2='$($object2.$property)'"
        }
    }

    return $differences
}

# Function to compare two datasets (array of objects)
function Compare-JsonData {
    param (
        [Parameter(Mandatory=$true)]
        [array]$data1,
        
        [Parameter(Mandatory=$true)]
        [array]$data2
    )

    $differences = @()

    # Compare object count
    if ($data1.Count -ne $data2.Count) {
        $differences += "The number of objects differs: sample1=$($data1.Count) sample2=$($data2.Count)"
    }

    # Compare each object by index (since they are now sorted)
    for ($i = 0; $i -lt $data1.Count; $i++) {
        $object1 = $data1[$i]
        $object2 = $data2[$i]
        
        # Compare the objects at the same index after sorting
        $diff = Compare-JsonObjects -object1 $object1 -object2 $object2
        if ($diff.Count -gt 0) {
            $differences += "Differences in object at index $i:"
            $differences += $diff
        }
    }

    return $differences
}

# Compare the data after sorting
$differences = Compare-JsonData -data1 $data1 -data2 $data2

# Output the results
if ($differences.Count -eq 0) {
    Write-Output "The two JSON files are identical."
} else {
    Write-Output "The two JSON files are not identical. Differences:"
    $differences | ForEach-Object { Write-Output $_ }
}
