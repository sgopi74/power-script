# Paths to the JSON files
$json1Path = "C:\path\to\file1.json"
$json2Path = "C:\path\to\file2.json"

# Load the JSON data
$json1 = Get-Content -Raw -Path $json1Path | ConvertFrom-Json
$json2 = Get-Content -Raw -Path $json2Path | ConvertFrom-Json

# Function to recursively compare two JSON objects (keys and values, ignoring order)
function Compare-Json {
    param (
        [Parameter(Mandatory=$true)] [pscustomobject]$json1,
        [Parameter(Mandatory=$true)] [pscustomobject]$json2,
        [string]$path = ""
    )

    $differences = @()

    # Get all keys from both JSON objects
    $allKeys = ($json1.PSObject.Properties.Name + $json2.PSObject.Properties.Name) | Sort-Object -Unique

    foreach ($key in $allKeys) {
        # Instead of using ?. operator, do null checks manually
        if ($json1.PSObject.Properties[$key]) {
            $value1 = $json1.PSObject.Properties[$key].Value
        } else {
            $value1 = $null
        }

        if ($json2.PSObject.Properties[$key]) {
            $value2 = $json2.PSObject.Properties[$key].Value
        } else {
            $value2 = $null
        }

        $currentPath = if ($path) { "$path.$key" } else { $key }

        # Check if the key exists in both JSON objects
        if ($null -eq $value1) {
            $differences += "Key '$currentPath' is missing in the first file but exists in the second."
        } elseif ($null -eq $value2) {
            $differences += "Key '$currentPath' is missing in the second file but exists in the first."
        } elseif ($value1 -is [pscustomobject] -and $value2 -is [pscustomobject]) {
            # If both values are objects, recursively compare them
            $differences += Compare-Json -json1 $value1 -json2 $value2 -path $currentPath
        } elseif ($value1 -is [array] -and $value2 -is [array]) {
            # If both values are arrays, compare them ignoring order
            $differenceInArray = Compare-JsonArrays -array1 $value1 -array2 $value2 -path $currentPath
            if ($differenceInArray) {
                $differences += $differenceInArray
            }
        } elseif ($value1 -ne $value2) {
            # If the values are different, report the difference
            $differences += "Difference at '$currentPath': '$value1' (file1) vs '$value2' (file2)"
        }
    }

    return $differences
}

# Function to compare two arrays (ignoring order)
function Compare-JsonArrays {
    param (
        [Parameter(Mandatory=$true)] [array]$array1,
        [Parameter(Mandatory=$true)] [array]$array2,
        [string]$path
    )

    $differences = @()

    # Sort both arrays to ignore order
    $sortedArray1 = $array1 | Sort-Object
    $sortedArray2 = $array2 | Sort-Object

    if ($sortedArray1.Count -ne $sortedArray2.Count) {
        $differences += "Array length mismatch at '$path': ${sortedArray1.Count} elements in file1, ${sortedArray2.Count} elements in file2"
    }

    for ($i = 0; $i -lt $sortedArray1.Count; $i++) {
        $value1 = $sortedArray1[$i]
        $value2 = $sortedArray2[$i]

        if ($value1 -is [pscustomobject] -and $value2 -is [pscustomobject]) {
            $differences += Compare-Json -json1 $value1 -json2 $value2 -path "$path[$i]"
        } elseif ($value1 -ne $value2) {
            $differences += "Difference in array at '$path[$i]': '$value1' (file1) vs '$value2' (file2)"
        }
    }

    return $differences
}

# Compare the two JSON files
$differences = Compare-Json -json1 $json1 -json2 $json2

# Output the results
if ($differences.Count -eq 0) {
    Write-Output "The two JSON files are identical."
} else {
    Write-Output "The two JSON files are not identical. Differences:"
    $differences | ForEach-Object { Write-Output $_ }
}
